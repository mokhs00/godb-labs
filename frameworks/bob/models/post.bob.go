// Code generated by BobGen mysql v0.30.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"io"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/mysql"
	"github.com/stephenafamo/bob/dialect/mysql/dialect"
	"github.com/stephenafamo/bob/dialect/mysql/dm"
	"github.com/stephenafamo/bob/dialect/mysql/sm"
	"github.com/stephenafamo/bob/dialect/mysql/um"
	"github.com/stephenafamo/bob/expr"
)

// Post is an object representing the database table.
type Post struct {
	PostID    int64     `db:"post_id,pk,autoincr" `
	UserID    int64     `db:"user_id" `
	Title     string    `db:"title" `
	Content   string    `db:"content" `
	CreatedAt time.Time `db:"created_at" `
	UpdatedAt time.Time `db:"updated_at" `
}

// PostSlice is an alias for a slice of pointers to Post.
// This should almost always be used instead of []*Post.
type PostSlice []*Post

// Posts contains methods to work with the post table
var Posts = mysql.NewTablex[*Post, PostSlice, *PostSetter]("post", []string{"post_id"})

// PostsQuery is a query on the post table
type PostsQuery = *mysql.ViewQuery[*Post, PostSlice]

type postColumnNames struct {
	PostID    string
	UserID    string
	Title     string
	Content   string
	CreatedAt string
	UpdatedAt string
}

var PostColumns = buildPostColumns("post")

type postColumns struct {
	tableAlias string
	PostID     mysql.Expression
	UserID     mysql.Expression
	Title      mysql.Expression
	Content    mysql.Expression
	CreatedAt  mysql.Expression
	UpdatedAt  mysql.Expression
}

func (c postColumns) Alias() string {
	return c.tableAlias
}

func (postColumns) AliasedAs(alias string) postColumns {
	return buildPostColumns(alias)
}

func buildPostColumns(alias string) postColumns {
	return postColumns{
		tableAlias: alias,
		PostID:     mysql.Quote(alias, "post_id"),
		UserID:     mysql.Quote(alias, "user_id"),
		Title:      mysql.Quote(alias, "title"),
		Content:    mysql.Quote(alias, "content"),
		CreatedAt:  mysql.Quote(alias, "created_at"),
		UpdatedAt:  mysql.Quote(alias, "updated_at"),
	}
}

type postWhere[Q mysql.Filterable] struct {
	PostID    mysql.WhereMod[Q, int64]
	UserID    mysql.WhereMod[Q, int64]
	Title     mysql.WhereMod[Q, string]
	Content   mysql.WhereMod[Q, string]
	CreatedAt mysql.WhereMod[Q, time.Time]
	UpdatedAt mysql.WhereMod[Q, time.Time]
}

func (postWhere[Q]) AliasedAs(alias string) postWhere[Q] {
	return buildPostWhere[Q](buildPostColumns(alias))
}

func buildPostWhere[Q mysql.Filterable](cols postColumns) postWhere[Q] {
	return postWhere[Q]{
		PostID:    mysql.Where[Q, int64](cols.PostID),
		UserID:    mysql.Where[Q, int64](cols.UserID),
		Title:     mysql.Where[Q, string](cols.Title),
		Content:   mysql.Where[Q, string](cols.Content),
		CreatedAt: mysql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt: mysql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

// PostSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type PostSetter struct {
	PostID    omit.Val[int64]     `db:"post_id,pk,autoincr" `
	UserID    omit.Val[int64]     `db:"user_id" `
	Title     omit.Val[string]    `db:"title" `
	Content   omit.Val[string]    `db:"content" `
	CreatedAt omit.Val[time.Time] `db:"created_at" `
	UpdatedAt omit.Val[time.Time] `db:"updated_at" `
}

func (s PostSetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if !s.PostID.IsUnset() {
		vals = append(vals, "post_id")
	}

	if !s.UserID.IsUnset() {
		vals = append(vals, "user_id")
	}

	if !s.Title.IsUnset() {
		vals = append(vals, "title")
	}

	if !s.Content.IsUnset() {
		vals = append(vals, "content")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s PostSetter) Overwrite(t *Post) {
	if !s.PostID.IsUnset() {
		t.PostID, _ = s.PostID.Get()
	}
	if !s.UserID.IsUnset() {
		t.UserID, _ = s.UserID.Get()
	}
	if !s.Title.IsUnset() {
		t.Title, _ = s.Title.Get()
	}
	if !s.Content.IsUnset() {
		t.Content, _ = s.Content.Get()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s *PostSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Posts.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 6)
		if s.PostID.IsUnset() {
			vals[0] = mysql.Raw("DEFAULT")
		} else {
			vals[0] = mysql.Arg(s.PostID)
		}

		if s.UserID.IsUnset() {
			vals[1] = mysql.Raw("DEFAULT")
		} else {
			vals[1] = mysql.Arg(s.UserID)
		}

		if s.Title.IsUnset() {
			vals[2] = mysql.Raw("DEFAULT")
		} else {
			vals[2] = mysql.Arg(s.Title)
		}

		if s.Content.IsUnset() {
			vals[3] = mysql.Raw("DEFAULT")
		} else {
			vals[3] = mysql.Arg(s.Content)
		}

		if s.CreatedAt.IsUnset() {
			vals[4] = mysql.Raw("DEFAULT")
		} else {
			vals[4] = mysql.Arg(s.CreatedAt)
		}

		if s.UpdatedAt.IsUnset() {
			vals[5] = mysql.Raw("DEFAULT")
		} else {
			vals[5] = mysql.Arg(s.UpdatedAt)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s PostSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions("post")...)
}

func (s PostSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if !s.PostID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "post_id")...),
			mysql.Arg(s.PostID),
		}})
	}

	if !s.UserID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "user_id")...),
			mysql.Arg(s.UserID),
		}})
	}

	if !s.Title.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "title")...),
			mysql.Arg(s.Title),
		}})
	}

	if !s.Content.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "content")...),
			mysql.Arg(s.Content),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "created_at")...),
			mysql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "updated_at")...),
			mysql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindPost retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindPost(ctx context.Context, exec bob.Executor, PostIDPK int64, cols ...string) (*Post, error) {
	if len(cols) == 0 {
		return Posts.Query(
			SelectWhere.Posts.PostID.EQ(PostIDPK),
		).One(ctx, exec)
	}

	return Posts.Query(
		SelectWhere.Posts.PostID.EQ(PostIDPK),
		sm.Columns(Posts.Columns().Only(cols...)),
	).One(ctx, exec)
}

// PostExists checks the presence of a single record by primary key
func PostExists(ctx context.Context, exec bob.Executor, PostIDPK int64) (bool, error) {
	return Posts.Query(
		SelectWhere.Posts.PostID.EQ(PostIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Post is retrieved from the database
func (o *Post) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Posts.AfterSelectHooks.RunHooks(ctx, exec, PostSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Posts.AfterInsertHooks.RunHooks(ctx, exec, PostSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Posts.AfterUpdateHooks.RunHooks(ctx, exec, PostSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Posts.AfterDeleteHooks.RunHooks(ctx, exec, PostSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the Post
func (o *Post) PrimaryKeyVals() bob.Expression {
	return mysql.Arg(o.PostID)
}

func (o *Post) pkEQ() dialect.Expression {
	return mysql.Quote("post", "post_id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Post
func (o *Post) Update(ctx context.Context, exec bob.Executor, s *PostSetter) error {
	_, err := Posts.Update(s.UpdateMod(), um.Where(o.pkEQ())).Exec(ctx, exec)
	if err != nil {
		return err
	}

	s.Overwrite(o)

	return nil
}

// Delete deletes a single Post record with an executor
func (o *Post) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Posts.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Post using the executor
func (o *Post) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Posts.Query(
		SelectWhere.Posts.PostID.EQ(o.PostID),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after PostSlice is retrieved from the database
func (o PostSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Posts.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Posts.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Posts.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Posts.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o PostSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return mysql.Raw("NULL")
	}

	return mysql.Quote("post", "post_id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o PostSlice) copyMatchingRows(from ...*Post) {
	for i, old := range o {
		for _, new := range from {
			if new.PostID != old.PostID {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o PostSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Posts.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Post:
				o.copyMatchingRows(retrieved)
			case []*Post:
				o.copyMatchingRows(retrieved...)
			case PostSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Post or a slice of Post
				// then run the AfterUpdateHooks on the slice
				_, err = Posts.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o PostSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Posts.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Post:
				o.copyMatchingRows(retrieved)
			case []*Post:
				o.copyMatchingRows(retrieved...)
			case PostSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Post or a slice of Post
				// then run the AfterDeleteHooks on the slice
				_, err = Posts.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o PostSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals PostSetter) error {
	_, err := Posts.Update(vals.UpdateMod(), o.UpdateMod()).Exec(ctx, exec)

	for i := range o {
		vals.Overwrite(o[i])
	}

	return err
}

func (o PostSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Posts.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o PostSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Posts.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}
