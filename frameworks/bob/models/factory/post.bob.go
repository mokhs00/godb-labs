// Code generated by BobGen mysql v0.30.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "godb-labs/frameworks/bob/models"
)

type PostMod interface {
	Apply(*PostTemplate)
}

type PostModFunc func(*PostTemplate)

func (f PostModFunc) Apply(n *PostTemplate) {
	f(n)
}

type PostModSlice []PostMod

func (mods PostModSlice) Apply(n *PostTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// PostTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type PostTemplate struct {
	PostID    func() int64
	UserID    func() int64
	Title     func() string
	Content   func() string
	CreatedAt func() time.Time
	UpdatedAt func() time.Time

	f *Factory
}

// Apply mods to the PostTemplate
func (o *PostTemplate) Apply(mods ...PostMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Post
// this does nothing with the relationship templates
func (o PostTemplate) toModel() *models.Post {
	m := &models.Post{}

	if o.PostID != nil {
		m.PostID = o.PostID()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.Title != nil {
		m.Title = o.Title()
	}
	if o.Content != nil {
		m.Content = o.Content()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.PostSlice
// this does nothing with the relationship templates
func (o PostTemplate) toModels(number int) models.PostSlice {
	m := make(models.PostSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Post
// according to the relationships in the template. Nothing is inserted into the db
func (t PostTemplate) setModelRels(o *models.Post) {}

// BuildSetter returns an *models.PostSetter
// this does nothing with the relationship templates
func (o PostTemplate) BuildSetter() *models.PostSetter {
	m := &models.PostSetter{}

	if o.PostID != nil {
		m.PostID = omit.From(o.PostID())
	}
	if o.UserID != nil {
		m.UserID = omit.From(o.UserID())
	}
	if o.Title != nil {
		m.Title = omit.From(o.Title())
	}
	if o.Content != nil {
		m.Content = omit.From(o.Content())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.PostSetter
// this does nothing with the relationship templates
func (o PostTemplate) BuildManySetter(number int) []*models.PostSetter {
	m := make([]*models.PostSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Post
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use PostTemplate.Create
func (o PostTemplate) Build() *models.Post {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.PostSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use PostTemplate.CreateMany
func (o PostTemplate) BuildMany(number int) models.PostSlice {
	m := make(models.PostSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatablePost(m *models.PostSetter) {
	if m.UserID.IsUnset() {
		m.UserID = omit.From(random_int64(nil))
	}
	if m.Title.IsUnset() {
		m.Title = omit.From(random_string(nil))
	}
	if m.Content.IsUnset() {
		m.Content = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Post
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *PostTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Post) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a post and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *PostTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Post, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a post and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *PostTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Post {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a post and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *PostTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Post {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a post and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *PostTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Post, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatablePost(opt)

	m, err := models.Posts.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = postCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple posts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o PostTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.PostSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple posts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o PostTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.PostSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple posts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o PostTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.PostSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple posts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o PostTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.PostSlice, error) {
	var err error
	m := make(models.PostSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Post has methods that act as mods for the PostTemplate
var PostMods postMods

type postMods struct{}

func (m postMods) RandomizeAllColumns(f *faker.Faker) PostMod {
	return PostModSlice{
		PostMods.RandomPostID(f),
		PostMods.RandomUserID(f),
		PostMods.RandomTitle(f),
		PostMods.RandomContent(f),
		PostMods.RandomCreatedAt(f),
		PostMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m postMods) PostID(val int64) PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.PostID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m postMods) PostIDFunc(f func() int64) PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.PostID = f
	})
}

// Clear any values for the column
func (m postMods) UnsetPostID() PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.PostID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m postMods) RandomPostID(f *faker.Faker) PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.PostID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m postMods) UserID(val int64) PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.UserID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m postMods) UserIDFunc(f func() int64) PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m postMods) UnsetUserID() PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m postMods) RandomUserID(f *faker.Faker) PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.UserID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m postMods) Title(val string) PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.Title = func() string { return val }
	})
}

// Set the Column from the function
func (m postMods) TitleFunc(f func() string) PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.Title = f
	})
}

// Clear any values for the column
func (m postMods) UnsetTitle() PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.Title = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m postMods) RandomTitle(f *faker.Faker) PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.Title = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m postMods) Content(val string) PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.Content = func() string { return val }
	})
}

// Set the Column from the function
func (m postMods) ContentFunc(f func() string) PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.Content = f
	})
}

// Clear any values for the column
func (m postMods) UnsetContent() PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.Content = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m postMods) RandomContent(f *faker.Faker) PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.Content = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m postMods) CreatedAt(val time.Time) PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m postMods) CreatedAtFunc(f func() time.Time) PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m postMods) UnsetCreatedAt() PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m postMods) RandomCreatedAt(f *faker.Faker) PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m postMods) UpdatedAt(val time.Time) PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m postMods) UpdatedAtFunc(f func() time.Time) PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m postMods) UnsetUpdatedAt() PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m postMods) RandomUpdatedAt(f *faker.Faker) PostMod {
	return PostModFunc(func(o *PostTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}
